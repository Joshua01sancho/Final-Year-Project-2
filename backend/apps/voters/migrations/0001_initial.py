# Generated by Django 4.2.23 on 2025-06-19 23:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('elections', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Voter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('blockchain_address', models.CharField(blank=True, max_length=42, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='voter_set', related_query_name='voter', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='voter_set', related_query_name='voter', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VoterSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('face_verified', models.BooleanField(default=False)),
                ('fingerprint_verified', models.BooleanField(default=False)),
                ('two_fa_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('current_election', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elections.election')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'session_key'], name='voters_vote_user_id_036eb7_idx'), models.Index(fields=['last_activity'], name='voters_vote_last_ac_113ea2_idx'), models.Index(fields=['expires_at'], name='voters_vote_expires_7245f2_idx')],
            },
        ),
        migrations.CreateModel(
            name='VoterProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('national_id', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='National ID can only contain letters, numbers, hyphens, and underscores', regex='^[A-Za-z0-9\\-_]+$')])),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(default='United States', max_length=100)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('accessibility_needs', models.JSONField(blank=True, default=list)),
                ('two_fa_enabled', models.BooleanField(default=False)),
                ('two_fa_secret', models.CharField(blank=True, max_length=32)),
                ('biometric_enabled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='voter_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_voters', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['national_id'], name='voters_vote_nationa_6b7057_idx'), models.Index(fields=['is_verified'], name='voters_vote_is_veri_94d541_idx'), models.Index(fields=['user', 'is_verified'], name='voters_vote_user_id_c61921_idx')],
            },
        ),
        migrations.CreateModel(
            name='BiometricData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biometric_type', models.CharField(choices=[('face', 'Face Recognition'), ('fingerprint', 'Fingerprint'), ('voice', 'Voice Recognition')], max_length=20)),
                ('encrypted_data', models.BinaryField()),
                ('data_hash', models.CharField(max_length=64)),
                ('face_id', models.CharField(blank=True, max_length=100, null=True)),
                ('face_features', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'biometric_type'], name='voters_biom_user_id_03b281_idx'), models.Index(fields=['face_id'], name='voters_biom_face_id_38f9d9_idx'), models.Index(fields=['is_active'], name='voters_biom_is_acti_1cff6b_idx')],
                'unique_together': {('user', 'biometric_type')},
            },
        ),
        migrations.CreateModel(
            name='AuthenticationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auth_method', models.CharField(choices=[('password', 'Password'), ('face', 'Face Recognition'), ('fingerprint', 'Fingerprint'), ('2fa', 'Two-Factor Authentication'), ('token', 'Token')], max_length=20)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('blocked', 'Blocked')], max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('error_message', models.TextField(blank=True)),
                ('failure_reason', models.CharField(blank=True, max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auth_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='voters_auth_user_id_dd6ac4_idx'), models.Index(fields=['auth_method', 'status'], name='voters_auth_auth_me_1e9433_idx'), models.Index(fields=['ip_address', 'timestamp'], name='voters_auth_ip_addr_7ad9b7_idx')],
            },
        ),
    ]
